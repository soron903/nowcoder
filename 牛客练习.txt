#define _CRT_SECURE_NO_WARNINGS

//#include <iostream>
//#include <string>
//using namespace std;
//#include <vector>
//
//int main()
//{
//	int X = 0;
//	int Y = 0;
//	string str;
//
//	getline(cin, str);
//	int init_pos = 0;
//
//	for(unsigned int i=0; i<str.size(); i++)
//	{
//		if (str[i] == ';')
//		{
//			int pos = i;
//			string temp = str.substr(init_pos, pos - init_pos);
//			if ((temp.size() == 3 && temp[1] >= '0' && temp[1] <= '9' && temp[2] >= '0' && temp[2] <= '9') ||
//				temp.size() == 2 && temp[1] >= '0' && temp[1] <= '9')
//			{
//				switch (temp[0])
//				{
//				case 'A':
//					X -= stoi(temp.substr(1), 0, 10);
//					break;
//				case 'D':
//					X += stoi(temp.substr(1), 0, 10);
//					break;
//				case 'W':
//					Y += stoi(temp.substr(1), 0, 10);
//					break;
//				case 'S':
//					Y -= stoi(temp.substr(1), 0, 10);
//					break;
//				default:
//					break;
//
//				}
//			}
//
//			init_pos = pos+1;
//		}
//		
//	}
//	cout << X << " " << Y << endl;
//	return 0;
//}
//
//#include <iostream>
//#include <string>
//#include <vector>
//#include <algorithm>
//
//int main()
//{
//    std::string tmp;
//    int X = 0, Y = 0;
//    std::cin >> tmp;
//    while (true)
//    {
//        if (tmp.find(';') == std::string::npos)
//        {
//            break;
//        }
//        int ii = tmp.find(';');
//        std::string str = tmp.substr(0, (ii - 0));
//        if ((str.size() == 3 && str.at(1) >= '0' && str.at(1) <= '9' && str.at(2) >= '0' && str.at(2) <= '9')
//            || (str.size() == 2 && str.at(1) >= '0' && str.at(1) <= '9'))
//        {
//            switch (str.at(0))
//            {
//            case 'A':X -= std::stoi(str.substr(1), 0, 10);break;
//            case 'D':X += std::stoi(str.substr(1), 0, 10);break;
//            case 'W':Y += std::stoi(str.substr(1), 0, 10);break;
//            case 'S':Y -= std::stoi(str.substr(1), 0, 10);break;
//            default:break;
//            }
//        }
//        tmp = tmp.substr(ii + 1);
//    }
//    std::cout << X << "," << Y << "\n";
//    return 0;
//}

//#include <iostream>
//#include <string>
//#include <algorithm>
//using namespace std;
//#include <vector>
//#include <map>
//#include <deque>
//int main()
//{
//	string str;
//	deque<pair<string,int>> v;
//
//	int see = 0;
//	int temp = 0;
//	while (getline(cin, str))
//	{
//		
//		reverse(str.begin(), str.end());
//
//		int pos = str.find('\\');
//		str = str.substr(0, pos);
//
//		pos = str.find(' ');
//		str = str.substr(0, pos + 17);
//		reverse(str.begin(), str.end());
//		int i = str.size();
//		if (v.size() == 0)
//		{
//			v.push_back(make_pair(str, 1));
//			continue;
//		}
//		
//		
//		for (auto itr = v.begin(); itr != v.end(); itr++)
//		{
//
//			if (itr->first== str)
//			{
//				(itr->second)++;
//				temp++;
//				break;
//			}
//		}
//		if (see == temp)
//		{
//			v.push_back(make_pair(str, 1));
//			
//		}
//		temp = 0;
//	
//	}
//	while (v.size() > 8)
//	{
//		v.pop_front();
//	}
//
//	for (auto i : v)
//	{
//		cout << i.first << " " << i.second << endl;
//	}
//	
//	return 0;
//}

#include <iostream>
#include <vector>
using namespace std;

int main() {
    int N, m;
    cin >> N >> m;
    // 由于价格是10的整数倍，处理一下以降低空间/时间复杂度
    N /= 10;
    vector<vector<int> > prices(61, vector<int>(3, 0));        // 价格
    vector<vector<int> > priceMultiplyPriority(61, vector<int>(3, 0));      // 重要程度
    for (int i = 1; i <= m; ++i) {
        int a, b, c;
        cin >> a >> b >> c;
        a /= 10; b *= a;
        if (c == 0) {
            prices[i][0] = a; priceMultiplyPriority[i][0] = b;
        }
        else {
            if (prices[c][1] == 0) {
                prices[c][1] = a; priceMultiplyPriority[c][1] = b;
            }
            else {
                prices[c][2] = a; priceMultiplyPriority[c][2] = b;
            }
        }
    }
    // 使用分组背包
    vector<vector<int> > dp(m + 1, vector<int>(N + 1, 0));
    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= N; ++j) {
            int a = prices[i][0], b = priceMultiplyPriority[i][0];
            int c = prices[i][1], d = priceMultiplyPriority[i][1];
            int e = prices[i][2], f = priceMultiplyPriority[i][2];
            dp[i][j] = j >= a ? max(dp[i - 1][j - a] + b, dp[i - 1][j]) : dp[i - 1][j];
            dp[i][j] = j >= (a + c) ? max(dp[i - 1][j - a - c] + b + d, dp[i][j]) : dp[i][j];
            dp[i][j] = j >= (a + e) ? max(dp[i - 1][j - a - e] + b + f, dp[i][j]) : dp[i][j];
            dp[i][j] = j >= (a + c + e) ? max(dp[i - 1][j - a - c - e] + b + d + f, dp[i][j]) : dp[i][j];
        }
    }
    cout << dp[m][N] * 10 << endl;
}